`Nonlinear System Solver 2.0'

: include(`../test/calculus.txt')
: include(`../test/linalg.txt')

: `Define system of equations here (2 for now but easily generalized)'
: func(eq1,{  2*[x]*[x] + 3*[y] - 1  })
: func(eq2,{  4*[x] - 7*[y] - 3      })

: `State the initial guess.'
: let(x0,-1)
: let(y0,-1)

: `Curry two-argument equations down to one argument.'
: func(eq1x,{eq1([x],{y0})})
: func(eq1y,{eq1({x0},[x])})
: func(eq2x,{eq2([x],{y0})})
: func(eq2y,{eq2({x0},[x])})

: `Set number of iterations.'
: 10 
: do

  : `Evaluate Jacobian matrix components.'
  : let(a1,deriv(eq1x,[x0],.01)) : `J_11'
  : let(b1,deriv(eq1y,[y0],.01)) : `J_12'
  : let(a2,deriv(eq2x,[x0],.01)) : `J_21'
  : let(b2,deriv(eq2y,[y0],.01)) : `J_22'

  : `Set up an augmented matrix to solve as a linear system.'
  : let(r, syslinsolve(
  <
  <[a1], [b1], -1*(eq1([x0],[y0])) + [a1]*[x0] + [b1]*[y0]> ,
  <[a2], [b2], -1*(eq2([x0],[y0])) + [a2]*[x0] + [b2]*[y0]>
  >
  ))

  : let(x0,elem(elem([r],1),3))
  : let(y0,elem(elem([r],2),3))

: loop

: print_<[x0],[y0]> ,\n

: print_<eq1([x0],[y0]),eq2([x0],[y0])>

:
print_\n

